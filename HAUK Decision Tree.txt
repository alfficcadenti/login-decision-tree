
# libraries
library(caret)
library(plyr)
library(rpart)
library(rpart.plot)
library(rattle)
library(RColorBrewer)
library(pROC)
library(ROCR)
library(corrplot)

# Load reviewed file
setwd(dir = "C://Users/aficcadenti/Documents/R/login Decision Tree/")
import<-read.csv(file = "C://Users/aficcadenti/Documents/R/login Decision Tree/Login_RAW_FEB_MAR.csv")


HAUK_data <- import[ which(import$Custom.Attribute.2=='homeaway_uk' | import$Custom.Attribute.2=='odhr' | import$Custom.Attribute.2=='homeaway_dk' | import$Custom.Attribute.2=='homeaway_no' | import$Custom.Attribute.2=='homeaway_se'), ]

#set accept as label to the not reviewed login
HAUK_data$Final.Review.Status[HAUK_data$Final.Review.Status==""]<-"accept"
HAUK_data$Final.Review.Status<-factor(HAUK_data$Final.Review.Status)

summary(HAUK_data$Final.Review.Status)

HAUK_data$Final.Review.Status.Numeric[HAUK_data$Final.Review.Status=="accept"]<-0
HAUK_data$Final.Review.Status.Numeric[HAUK_data$Final.Review.Status=="reject"]<-1

#================================================
# create new columns for the following variables:
#================================================


# account in watchlist
HAUK_data$watchlist<-grepl("Account in Watchlist", HAUK_data$Reasons)

# account is older than 30 days
HAUK_data$OldAccount<-grepl("Pattern Account is Old", HAUK_data$Reasons)

# Account with 4 Consistent Attributes
HAUK_data$ConsistentAttribs<-grepl("Account with 4 Consistent Attributes", HAUK_data$Reasons)

# account is older than 3 months
HAUK_data$Account3MOld<-grepl("Account Number is older 3M", HAUK_data$Reasons)

# account is older than 12 months
HAUK_data$Account12MOld<-grepl("Account Number is older 12M", HAUK_data$Reasons)

# IP already used for accounts
HAUK_data$IPalreadyUsed<-grepl("Input IP to Account GT 10 Passed 1weekOFF", HAUK_data$Reasons)

# New Device to Account
HAUK_data$NewDeviceToAccount<-grepl("New Device to Account in a Hr (Smart ID)", HAUK_data$Reasons)

# Input IP age less than a week
HAUK_data$NewInputIPLTweek<-grepl("Input IP LT Week", HAUK_data$Reasons)

# DNS new to Account
HAUK_data$DNSNewAccount<-grepl("Account Number and DNS IP LT 2", HAUK_data$Reasons)

# Profiling Incomplete
HAUK_data$ProfIncomplete<-grepl("Profiling Incomplete", HAUK_data$Reasons)

# Profiling Blocked 
HAUK_data$ProfBlocked<-grepl("Profiling Blocked", HAUK_data$Reasons)

# New IP GEO for Account 
HAUK_data$NewIPGEO<-grepl("New IP GEO for Account", HAUK_data$Reasons)

# IF CusAttr7 seen GT 2 Accounts
HAUK_data$CustAttr7MultipleAccounts<-grepl("IF CusAttr7 seen GT 2 Accounts", HAUK_data$Reasons)

# IF browser language contains EN
#HAUK_data$BrowserLangEN<-grepl("browser language contains en", HAUK_data$Reasons)

# IF browser language suspicious for HAUK
#HAUK_data$BrowserLangSuspHAUK<-grepl("browser language suspicious for HAUS", HAUK_data$Reasons)




# other variables...

#================================================
# complete the data cleaning on the sample dataset
#================================================

# remove brackets and data cleaning
HAUK_data$Custom.Output.18<-gsub(pattern = "[{\"]", replacement = "", x = HAUK_data$Custom.Output.18)
HAUK_data$Custom.Output.18<-gsub(pattern = "[}\"]", replacement = "", x = HAUK_data$Custom.Output.18)
HAUK_data$Reasons<-gsub(pattern = "[{]", replacement = "", x = HAUK_data$Reasons)
HAUK_data$Reasons<-gsub(pattern = "[}]", replacement = "", x = HAUK_data$Reasons)
HAUK_data$InputIpZeroScore<-gsub(pattern = "[}]", replacement = "", x = HAUK_data$Reasons)
HAUK_data$Event.Time<-as.POSIXct(substr(HAUK_data$Event.Time,1,19), format = "%Y%m%d %H:%M:%S")

#day of the week
HAUK_data$Weekday<-format(HAUK_data$Event.Time,format='%w')
table(HAUK_data$Weekday)

#hour of the day
HAUK_data$hour<-format(HAUK_data$Event.Time,format='%H')


# Save in a file
write.csv(HAUK_data, file = "C://Users/aficcadenti/Documents/R/login Decision Tree/HAUK_DATA_preprocess.csv")
write.csv(HAUK_sample, file = "C://Users/aficcadenti/Documents/R/login Decision Tree/HAUK_sample.csv")

#====================================
# sampling for train and test dataset
#====================================

#Stratified sampling from the whole dataset
sample_index <- createDataPartition(HAUK_data$Final.Review.Status, p = .8, list = FALSE)
train <- HAUK_data[sample_index,]
test  <- HAUK_data[sample_index,]


#to verify distribution of the samples
summary(train$Final.Review.Status)
summary(train$Final.Review.Status)/dim(train)[1]

summary(test$Final.Review.Status)
summary(test$Final.Review.Status)/dim(test)[1]

#======== Undersampling
#reduce the dataset to have only 2.5% of the accept and 100% of the reject
HAUK_accept <- HAUK_data[ which(HAUK_data$Final.Review.Status=='accept'),]
indexes_accept <- sample(1:nrow(HAUK_data[ which(HAUK_data$Final.Review.Status=='accept'),]), size=0.025*nrow(HAUK_data[ which(HAUK_data$Final.Review.Status=='accept'),]))

HAUK_reject <- HAUK_data[ which(HAUK_data$Final.Review.Status=='reject'),]
HAUK_sample<-rbind(HAUK_data[indexes_accept,],HAUK_reject)

#Perform stratified sampling on the subset 80/20
sample_index <-createDataPartition(HAUK_sample$Final.Review.Status, p = .8, list = FALSE)
train <- HAUK_sample[ sample_index,]
test  <- HAUK_sample[sample_index,]






#===========
#Correlation
#===========

#convert data frame to data matrix to force all columns as numeric
HAUK_matrix<-data.matrix(HAUK_sample, rownames.force = NA)
corrplot(cor(HAUK_matrix,use = "p"),type = "lower",use = "complete.obs")



#==============
#Model Building
#==============

#first model
fit <-rpart(Final.Review.Status ~ Custom.Attribute.1 + Custom.Attribute.2 + Agent.Type + Input.IP.Score + Input.IP.Worst.Score + OldAccount + Weekday +  True.IP.Routing.Type + watchlist + IPalreadyUsed + DNSNewAccount + NewInputIPLTweek + ProfIncomplete + ProfBlocked + True.IP.Result,
             data=train,
             method="class")

			 
fancyRpartPlot(fit,palettes=c("Greens"),sub=paste("Decision Tree ATO Detection model ",format(Sys.time(), "%Y %b %d %a %X "),sep=" "))


#second model all variables)
fit <-rpart(Final.Review.Status ~ Custom.Attribute.1 + Custom.Attribute.2 + Agent.Type + Input.IP.Score + Input.IP.Worst.Score + DNSNewAccount + ProfIncomplete + ProfBlocked + True.IP.Result,
             data=train,
             method="class")

fancyRpartPlot(fit,palettes=c("Greens","Reds"),sub=paste("Decision Tree ATO Detection model ",format(Sys.time(), "%Y %b %d %a %X "),sep=" "))


#forth model (based on the correlation + rules new profile (device IP)) SAME SCORE as the PREVIOUS
fit < rpart(Final.Review.Status ~ True.IP.Geo + NewIPGEO + Input.IP.Worst.Score + BrowserLangEN + True.IP.Result +BrowserLangSuspAbritel + NewDeviceToAccount + NewInputIPLTweek, data=train,method="class")

fancyRpartPlot(fit,palettes=c("Greens","Reds"),sub=paste("Decision Tree ATO Detection model ",format(Sys.time(), "%Y %b %d %a %X "),sep=" "), type =4)



#==================
# Model Performance
#==================

pred = predict(fit, newdata=test, type = 'class')
#ROCRpred<prediction(pred,test$Final.Review.Status)
confusionMatrix(data=pred, test$Final.Review.Status, positive="reject")
roc(as.numeric(pred),as.numeric(test$Final.Review.Status))
plot.roc(as.numeric(pred),as.numeric(test$Final.Review.Status))

# ======
# Recall
# ======

pred = predict(fit, newdata=HAUK_data, type = 'class')
#ROCRpred<prediction(pred,HAUK_data$Final.Review.Status)
confusionMatrix(data=pred, HAUK_data$Final.Review.Status, positive="reject")
roc(as.numeric(pred),as.numeric(HAUK_data$Final.Review.Status))
plot.roc(as.numeric(pred),as.numeric(HAUK_data$Final.Review.Status))

